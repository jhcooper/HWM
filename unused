def meters_to_feet(df):
    # Convert and round water levels to feet
    df['Peak Water Level'] = df['Peak Water Level'].apply(lambda x: round(x * 3.281, 3))


def locate_parallels(filtered_df, target_df):
    # Separate date and time for filtered_df
    iltered_df.loc[:, 'Date'] = filtered_df['Date Time'].dt.date
    filtered_df.loc[:, 'Time'] = filtered_df['Date Time'].dt.time
    # Separate date and time for target_df
    target_df.loc[:, 'Date'] = target_df['Date Time'].dt.date
    target_df.loc[:, 'Time'] = target_df['Date Time'].dt.time

    dates = filtered_df['Date']
    matched_dates = target_df[target_df['Date'].isin(dates)]
    print(matched_dates)

    time_diff = (matched_dates['Date Time'].diff().dt.total_seconds() / 3600)
    # Create a boolean series (true if not same day or null)
    isSameDay = (time_diff > 24) | pd.isnull(time_diff)
    # filter out all values that lie on the same day
    filtered = time_diff[isSameDay]
    return filtered

def formatAndSave(df,fileName):
    # Fill missing High-High values and dates with High counterparts
    df['date_time_HH'].fillna(df['date_time_H'], inplace=True)
    df['HH_water_level'].fillna(df['H_water_level'], inplace=True)

    # Remove unneeded columns and Rename Water level and DateTime Columns
    df.rename(columns={'date_time_HH': 'Date Time', 'HH_water_level': 'Water Level'}, inplace=True)
    df.drop(
        columns={'date_time_H', 'H_water_level', 'date_time_L', 'L_water_level', 'date_time_LL', 'LL_water_level', },
        inplace=True)

    # Revert from DateTime indexing to linear Indexing
    df.index = pd.RangeIndex(start=0, stop=len(df))
    df.to_csv(f"./Filtered_Data/{fileName}_filtered.csv", index=False)
    return df